#define __STDC_LIMIT_MACROS
#define __STDC_CONSTANT_MACROS

#include <set>
#include "llvm/Pass.h"
#include "llvm/IR/Module.h"
#include "llvm/IR/Function.h"
#include "llvm/Support/raw_ostream.h"
#include "llvm/Assembly/AssemblyAnnotationWriter.h"
#include "llvm/Support/Debug.h"
#include "llvm/IR/InstrTypes.h"
#include "llvm/IR/BasicBlock.h"
#include "llvm/IR/Instruction.h"
#include "llvm/IR/Instructions.h"
#include "llvm/IR/Type.h"
#include "llvm/Analysis/LibCallSemantics.h"
#include <string>
#include "llvm/IR/Constants.h"
#include "llvm/Support/Casting.h"
#include "llvm/Transforms/Utils/SimplifyLibCalls.h"
#include "llvm/Analysis/LibCallSemantics.h"
#include "llvm/IR/GlobalAlias.h"
#include "llvm/IR/InlineAsm.h"
#include <iostream>
//#include "llvm/Support/DebugLoc.h"
using namespace std;
using namespace llvm;

namespace {
struct Uir : public ModulePass {
    static char ID;
    Uir() : ModulePass(ID) {}
    std::set< BlockAddress* > MasBA;
    bool isfp=true;
	int sys[400][400];
    string  TID[20] = {
        "VoidTyID" , "HalfTyID", "FloatTyID", "DoubleTyID",
        "X86_FP80TyID", "FP128TyID", "PPC_FP128TyID", "LabelTyID",
        "MetadataTyID", "X86_MMXTyID", "IntegerTyID", "FunctionTyID",
        "StructTyID", "ArrayTyID", "PointerTyID", "VectorTyID",
        "NumTypeIDs", "LastPrimitiveTyID = X86_MMXTyID", "FirstDerivedTyID = IntegerTyID"
    };

    void dumpfheader(llvm::Function &mn)
    {
        errs() << "\n Function: ";
        errs().write_escaped(mn.getName().str())<<"(";
        if(mn.arg_empty()==false)
        {
            for(llvm::Function::arg_iterator aie=mn.arg_begin(), ain=mn.arg_end();aie!=ain;++aie)
            {
                errs().write_escaped(" ")<<TID[aie->getType()->getTypeID()];
            }

        }
        else
        {
            errs().write_escaped("*arg_empty!*");
        }
        errs().write_escaped(" ")<<")";

        errs().write_escaped("::CallingConv::")<<mn.getCallingConv()<<"\n";

    }
    bool replace(std::string& str, const std::string& from, const std::string& to) {
        size_t start_pos = str.find(from);
        if(start_pos == std::string::npos)
            return false;
        str.replace(start_pos, from.length(), to);
        return true;
    }

    virtual bool runOnModule(llvm::Module &M) {
	int k=0,l=0;
	for(k=0;k<400;k++)
	{
		for(l=0;l<400;l++)
		{
			sys[k][l]=0;
		}
	}
        llvm::Function * mn=M.getFunction("main");

        dumpfheader(*mn);
        if(!mn->empty())
        {
            llvm::BasicBlock * BB = &mn->getEntryBlock();
            Tree(BB,M,0);
        }
        
        return false;
    }
    bool Tree(llvm::BasicBlock * BB,llvm::Module &M, int thsis)
    {
        int lssis=0;
        isfp=true;
        if(MasBA.find(BlockAddress::get(BB)) != MasBA.end())
        {
            return false;
        }
        MasBA.insert(BlockAddress::get(BB));
        //errs().write_escaped("Block ")<<BlockAddress::get(BB)<<"\n";

        llvm::TerminatorInst * TI;
        llvm::BasicBlock * NBB;
        if(BB->empty()==false)
        {
            for(llvm::BasicBlock::iterator inn=BB->begin(), ine=BB->end(); inn!=ine ;++inn)
            {

                string oper;
                Instruction * instr=inn;

                llvm::CallInst * cins=dyn_cast_or_null<CallInst>(instr);
                if(cins==NULL)
                {
                    //errs()<<*instr;
                    //errs()<<"\n";
                }
                else
                {

                    errs().write_escaped(inn->getOpcodeName () )<<" ";
                    for (User::op_iterator i = inn->op_begin(), e = inn->op_end(); i != e; ++i)
                    {
                        Value * v = *i;
                        errs().write_escaped(v->getName())<<" ";
                        oper=v->getName();

                    }
                    string funkName;

                    llvm::Function* insmn=cins->getCalledFunction();

                    if(insmn==NULL)
                    {
                            if (cins->isInlineAsm())
                            {
                                errs()<<"\nINLINE\n";
                                errs()<<*cins->getCalledValue();
				errs()<<"\n";
                                errs()<<*cins->getArgOperand(0);
				errs()<<"=";
                                llvm::ConstantInt * xxx=dyn_cast_or_null<llvm::ConstantInt>(cins->getArgOperand(0));
				if(xxx!=NULL)
				{
					lssis=thsis;
					thsis=xxx->getLimitedValue();
					sys[lssis][thsis]=1;
					errs()<<thsis;
                                }
                                
				
                                errs()<<"\n";
                            }
                            else
                            {
                                if(M.getNamedAlias(cins->getCalledValue()->getName())!=NULL)
                                {
                                 GlobalAlias* glal= M.getNamedAlias(cins->getCalledValue()->getName());
                                 funkName=glal->getName().str();
                                 Constant * newfun=glal->getAliasee();
                                 insmn=dyn_cast_or_null<Function>(newfun);
                                 if(insmn==NULL)
                                 {
				 	if(replace(funkName,"64",""))
                        			{
                           			 errs()<<funkName;
                          			 insmn=M.getFunction(funkName);
                      			  	}
					if(insmn==NULL)
                                     	{errs()<<"Ne prokanalo";cin.get();}
					
                                 }
                                 else
                                 {
                                 Tree(&insmn->getEntryBlock(),M,thsis);
                                 }
                                }
                             }

                    }
                    else
                    {

                        funkName=insmn->getName().str();
                        if(replace(funkName,"__isoc99_",""))
                        {
                            errs()<<funkName;
                           insmn=M.getFunction(funkName);
                        }
                        dumpfheader(*insmn);
                        if(!insmn->empty())

                        {

                            llvm::BasicBlock * IBB = &insmn->getEntryBlock();

                            Tree(IBB,M,thsis);

                        }
                        else
                        {

                            errs()<<"huita\n";

                        }

                    }

                }
               // errs().write_escaped(" ")<<"\n";

            }

            TI=BB->getTerminator();
            unsigned int NS= TI->getNumSuccessors();
            for(int i=0;i<NS;i++)
            {
                NBB=TI->getSuccessor(i);
                Tree(NBB,M,thsis);
            }
        }

    }


};
}

char Uir::ID = 0;
static RegisterPass<Uir> X("uir", "uir pass", false, false);
